#pragma once
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
/*
Nombre Clase : 	  SYSTEMS (Clase que almancena y utliza los diferentes sistemas a probar).
Fecha	     :	  14:13 pm 24-03-2016.
Diseñador    :	  Gustavo Catalán Ulloa.
*/
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//librerias.
#include <vector>

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//espacio de nombres.
using namespace std;

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//tipos.
typedef 	void					vo;
typedef 	char					ch;
typedef 	bool					bo;
typedef		int						in;
typedef		double					dou;
typedef		vector<double>			vedou;
typedef		vector<vector<dou>>		vevedou;

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//definiciones.
#define		BUFF_OUTPUT_SIZE		10

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//nombre de espacio UPC.
namespace UPC
{
	//---------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------
	//clase: Programa para la red de unidades de procesos cognitivos tipo 'DD'.
	class SYSTEMS
	{

		//elementos privados.
	private:

		//-----------------------------------------------------------------------------
		//-----------------------------------------------------------------------------
		//parámetros de los SYSTEMS.		
		dou		BUFF_OUTPUT[BUFF_OUTPUT_SIZE];												//buffer de salida.

		//métodos públicos.
	public:

		//-----------------------------------------------------------------------------
		//-----------------------------------------------------------------------------
		//métodos constructor.
		SYSTEMS();

		//-----------------------------------------------------------------------------
		//-----------------------------------------------------------------------------
		//métodos destructor.
		~SYSTEMS();

		//-----------------------------------------------------------------------------
		//-----------------------------------------------------------------------------
		//método de entrada y salida de los SYSTEMS.
		vo input(in &_sistema, dou *_input, dou *_salida);

		//-----------------------------------------------------------------------------
		//-----------------------------------------------------------------------------
		//método de reSeteo.
		vo reSetSystem(in &_sistema, dou &_condicionInicial);

		//-----------------------------------------------------------------------------
		//-----------------------------------------------------------------------------
		//SYSTEMS.
		vo	sistema0(dou *_input, dou *_salida);
		vo	sistema1(dou *_input, dou *_salida);
		vo	sistema2(dou *_input, dou *_salida);
		vo	sistema3(dou *_input, dou *_salida);

		//-----------------------------------------------------------------------------
		//-----------------------------------------------------------------------------
		//métodos de reSeteo de los SYSTEMS.
		vo	reSetSistema0(dou &_condicionInicial);
		vo	reSetSistema1(dou &_condicionInicial);
		vo	reSetSistema2(dou &_condicionInicial);
		vo	reSetSistema3(dou &_condicionInicial);

		//-----------------------------------------------------------------------------
		//-----------------------------------------------------------------------------
		//método de actualización del buffer de salida.
		vo  updateBUFF_OUTPUT();
	};
}

