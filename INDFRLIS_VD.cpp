//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
/*
Nombre Clase : 	  INDFRLIS_VD (Estructura de información de relación de flujo diferencial de entradas tipo 'VD').
Fecha	     :	  15:44 pm 15-04-2015.
Diseñador    :	  Gustavo Catalán Ulloa.
descripción	 :	  XXXXXXXXXXXX.
*/
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//librerias.
#include "INDFRLIS_VD.h"

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//espacio de nombres.
using namespace UPC;

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: constructor.
INDFRLIS_VD::INDFRLIS_VD()
{
	//---------------------------------------------------------------------------------
	//inicialización de registros.
	this->EV_DIF_RG			= -1;															//diferencia entre registros de evaluación.
	this->STR1_ID_RG		= -1;															//id estructura n°1.
	this->STR2_ID_RG		= -1;															//id estructura n°2.
	this->UPCI_ID_STR1_RG	= -1;															//id upci de estructura n°1.
	this->UPCI_ID_STR2_RG	= -1;															//id upci de estructura n°2.

	//---------------------------------------------------------------------------------
    //inicialización de las dimensiones del registro de entrada.
    this->X_LENGTH			= -1;                                                           //largo en "x".

	//---------------------------------------------------------------------------------
	//inicialización de sub-registros.
	this->CS_SRG			= -1;															//estado de congruencia.
	this->RS_SRG			= -1;															//fortaleza de la relación.
	this->AL_SRG			= -1;															//nivel de actividad.	
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#2: destructor.
INDFRLIS_VD::~INDFRLIS_VD()
{
	//---------------------------------------------------------------------------------
	//limpieza de buffer.
	this->Clean();
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//método para inicializar estructura.
vo INDFRLIS_VD::Initialize(in _x_length)
{
	//---------------------------------------------------------------------------------
	//inicialización de vectores 'X'.
	this->IN_DIF_RG = new dou [_x_length];

	//---------------------------------------------------------------------------------
	//seteo de las dimensiones del registro.
	this->X_LENGTH	= _x_length;

	//---------------------------------------------------------------------------------
	//inicialización de vectores 'X'.
	for (register in i1 = 0; i1 < _x_length; i1++)
	{
		//-----------------------------------------------------------------------------
		//llenado de la matriz.
		this->IN_DIF_RG[i1] = -1;
	}
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método para crear estructura.
vo INDFRLIS_VD::Create(dou *_in_dif_rg, dou _ev_dif_rg, in _str1_id, in _str2_id, in _upci_id_str1, in _upci_id_str2, dou _rs_srg, dou _al_srg)
{
	//---------------------------------------------------------------------------------
	//paralelización del bucle for.
	#pragma omp parallel for

	//---------------------------------------------------------------------------------
	//seteo del registro de diferencia en 'X'.
	for (in i1 = 0; i1 < this->X_LENGTH; i1++)
	{
		//-------------------------------------------------------------------------
		//seteo del registro de diferencia.
		this->IN_DIF_RG[i1] = _in_dif_rg[i1];
	}

	//---------------------------------------------------------------------------------
	//inicialización de registros.
	this->EV_DIF_RG			= _ev_dif_rg;													//diferencia entre registros de evaluación.
	this->STR1_ID_RG		= _str1_id;														//id estructura n°1.
	this->STR2_ID_RG		= _str2_id;														//id estructura n°2.
	this->UPCI_ID_STR1_RG	= _upci_id_str1;												//id upci de estructura n°1.
	this->UPCI_ID_STR2_RG	= _upci_id_str2;												//id upci de estructura n°2.

	//---------------------------------------------------------------------------------
	//inicialización de sub-registros.
	this->CS_SRG			= OFF;															//estado de congruencia.
	this->RS_SRG			= _rs_srg;														//fortaleza de la relación.
	this->AL_SRG			= _al_srg;														//nivel de actividad.
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método para crear una relación a la estructura.
vo INDFRLIS_VD::CreateRelation(in _rl_type, in _rl_id, in _upci_type, in _upci_id)
{
	//--------------------------------------------------------------------------------
	//seteo de uana relación a la estructura.
	this->RL.push_back(deque<in>(0));
	this->RL.back().push_back(_rl_type);
	this->RL.back().push_back(_rl_id);
	this->RL.back().push_back(_upci_type);
	this->RL.back().push_back(_upci_id);
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#2: método para eliminar una relación a la estructura.
vo INDFRLIS_VD::DeleteRelation(in _index)
{
	//---------------------------------------------------------------------------------
	//eliminación de la relación en _index.
	this->RL.erase(RL.begin() + _index);
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método para diferenciar estructura.
dou INDFRLIS_VD::Differentiate(dou *_in_dif_rg)
{
	//---------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------
	//nivel de congruencia de las estructuras.
	dou congruence = 0;

	//---------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------
	//bucle para diferenciar estructura en 'X'.
	for (in i1 = 0; i1 < this->X_LENGTH; i1++)
	{
		//-----------------------------------------------------------------------------
		//si "_in_dif_rg" es mayor, entonces.
		if (abs(_in_dif_rg[i1]) > abs(this->IN_DIF_RG[i1]))
		{
			//-------------------------------------------------------------------------
			//diferenciación de estructuras para obtener congruencia porcentual acumulada.
			congruence += 100.0 - ((abs(_in_dif_rg[i1] - this->IN_DIF_RG[i1]) / abs(_in_dif_rg[i1])) * 100.0);
		}

		//-----------------------------------------------------------------------------
		//si "_in_dif_rg" es menor o igual, entonces.
		else
		{
			//-------------------------------------------------------------------------
			//diferenciación de estructuras para obtener congruencia porcentual acumulada.
			congruence += 100.0 - ((abs(_in_dif_rg[i1] - this->IN_DIF_RG[i1]) / abs(this->IN_DIF_RG[i1])) * 100.0);
		}
	}

	//---------------------------------------------------------------------------------
	//cálculo del nivel de congruencia.
	congruence = congruence / this->X_LENGTH;

	//---------------------------------------------------------------------------------
	//retorno del nivel de congruencia.
	return congruence;
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método para obtener la cantidad de relaciones.
in INDFRLIS_VD::GetRelationAmount()
{
	//---------------------------------------------------------------------------------
	//obtención de la cantidad de relaciones.
	return in(this->RL.size());
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#2: método para obtener índice de una relación.
in INDFRLIS_VD::GetRelationIndex(in _rl_type, in _rl_id, in _upci_type, in _upci_id)
{
	//---------------------------------------------------------------------------------
	//cantidad de relaciones.
	in rl_amount = this->GetRelationAmount();

	//---------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------
	//bucle para hallar la relación.
	for (in i1 = 0; i1 < rl_amount; i1++)
	{
		//-----------------------------------------------------------------------------
		//si se halla la relación, entonces retornar el índice de la relación.
		if (_rl_type == abs(this->RL.at(i1).at(0)) && _rl_id == this->RL.at(i1).at(1) && _upci_type == this->RL.at(i1).at(2) && _upci_id == this->RL.at(i1).at(3))	return i1;
	}

	//---------------------------------------------------------------------------------
	//retorno si no se ha hallado la relación.
	return -1;
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#3: método especial para obtener índice de la siguiente relación saliente.
in INDFRLIS_VD::GetNextOutputRelationS(in _rl_start_index)
{
	//---------------------------------------------------------------------------------
	//obtención de la cantidad de relaciones.
	in rl_amount = this->GetRelationAmount();

	//---------------------------------------------------------------------------------
	//bucle para obtener el índice de la siguiente relación PFRLIS saliente.
	for (in i1 = _rl_start_index + 1; i1 < rl_amount; i1++)
	{
		//-----------------------------------------------------------------------------
		//si la relación es saliente, entonces.
		if (this->RL.at(i1).at(0) == PFRLIS_TYPE)
		{
			//-------------------------------------------------------------------------
			//retorno del índice de la relación saliente.
			return  i1;
		}
	}

	//---------------------------------------------------------------------------------
	//retorno si no se ha hallado la relación.
	return -1;
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#4: método para obtener índice de la anterior relación PFRLIS entrante.
in INDFRLIS_VD::GetPreviousInputRelationS(in _rl_start_index)
{
	//---------------------------------------------------------------------------------
	//bucle para obtener el índice de la anterior relación PFRLIS entrante.
	for (in i1 = _rl_start_index - 1; i1 >= 0; i1--)
	{
		//-----------------------------------------------------------------------------
		//si la relación es entrante, entonces.
		if (this->RL.at(i1).at(0) == -PFRLIS_TYPE)
		{
			//-------------------------------------------------------------------------
			//retorno del índice de la relación entrante.
			return  i1;
		}
	}

	//---------------------------------------------------------------------------------
	//retorno si no se ha hallado la relación.
	return -1;
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método para setear la estructura.
vo INDFRLIS_VD::Set(dou *_in_dif_rg, dou _ev_dif_rg, in _x_length, in _str1_id, in _str2_id, in _upci_id_str1, in _upci_id_str2, in _cs_srg, dou _rs_srg, dou	_al_srg, dedein	&_rl)
{
	//---------------------------------------------------------------------------------
	//paralelización del bucle for.
	#pragma omp parallel for

	//---------------------------------------------------------------------------------
	//seteo del registro de diferencia en 'X'.
	for (in i1 = 0; i1 < this->X_LENGTH; i1++)
	{
		//-------------------------------------------------------------------------
		//seteo del registro de diferencia.
		this->IN_DIF_RG[i1] = _in_dif_rg[i1];
	}

	//---------------------------------------------------------------------------------
	//inicialización de registros.
	this->EV_DIF_RG			= _ev_dif_rg;													//diferencia entre registros de evaluación.
	this->STR1_ID_RG		= _str1_id;														//id estructura n°1.
	this->STR2_ID_RG		= _str2_id;														//id estructura n°2.
	this->UPCI_ID_STR1_RG	= _upci_id_str1;												//id upci de estructura n°1.
	this->UPCI_ID_STR2_RG	= _upci_id_str2;												//id upci de estructura n°2.

	//---------------------------------------------------------------------------------
    //seteo de las dimensiones del registro de entrada.
    this->X_LENGTH			= _x_length;                                                    //largo en "x".

	//---------------------------------------------------------------------------------
	//seteo de relaciones.
	this->RL				= _rl;	
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método para Clean la estructura.
vo INDFRLIS_VD::Clean()
{
	//---------------------------------------------------------------------------------
	//paralelización del bucle for.
	#pragma omp parallel for

	//---------------------------------------------------------------------------------
	//reset del registro de diferencia en 'X'.
	for (in i1 = 0; i1 < this->X_LENGTH; i1++)
	{
		//-----------------------------------------------------------------------------
		//reset del registro de diferencia.
		this->IN_DIF_RG[i1] = -1;
	}

	//---------------------------------------------------------------------------------
	//reset de registros.
	this->EV_DIF_RG			= -1;															//diferencia entre registros de evaluación.
	this->STR1_ID_RG		= -1;															//id estructura n°1.
	this->STR2_ID_RG		= -1;															//id estructura n°2.
	this->UPCI_ID_STR1_RG	= -1;															//id upci de estructura n°1.
	this->UPCI_ID_STR2_RG	= -1;															//id upci de estructura n°2.

	//---------------------------------------------------------------------------------
    //reset de las dimensiones del registro de entrada.
    this->X_LENGTH			= -1;                                                           //largo en "x".

	//---------------------------------------------------------------------------------
	//reset de sub-registros.
	this->CS_SRG			= -1;															//estado de congruencia.
	this->RS_SRG			= -1;															//fortaleza de la relación.
	this->AL_SRG			= -1;															//nivel de actividad.

	//---------------------------------------------------------------------------------
	//reset de relaciones.
	this->RL.clear();
}
