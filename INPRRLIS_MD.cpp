//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
/*
Nombre Clase : 	  INPRRLIS_MD (Estructura de información de relación de flujo proporcional de entradas tipo 'MD').
Fecha	     :	  11:50 pm 13-02-2017.
Diseñador    :	  Gustavo Catalán Ulloa.
descripción	 :	  XXXXXXXXXXXX.
*/
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//librerias.
#include "INPRRLIS_MD.h"

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//espacio de nombres.
using namespace UPC;

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: constructor.
INPRRLIS_MD::INPRRLIS_MD()
{
	//---------------------------------------------------------------------------------
	//inicialización de registros.
	this->STR1_ID_RG		= -1;															//id estructura n°1.
	this->STR2_ID_RG		= -1;															//id estructura n°2.
	this->UPCI_ID_STR1_RG	= -1;															//id upci de estructura n°1.
	this->UPCI_ID_STR2_RG	= -1;															//id upci de estructura n°2.

	//---------------------------------------------------------------------------------
    //inicialización de las dimensiones del registro de entrada.
    this->X_LENGTH			= -1;                                                           //largo en "x".
    this->Y_LENGTH			= -1;                                                           //largo en "y".

	//---------------------------------------------------------------------------------
	//inicialización de sub-registros.
	this->CS_SRG			= -1;															//estado de congruencia.
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#2: destructor.
INPRRLIS_MD::~INPRRLIS_MD()
{
	//---------------------------------------------------------------------------------
	//limpieza de buffer.
	this->Clean();
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//método para inicializar estructura.
vo INPRRLIS_MD::Initialize(in _x_length, in _y_length)
{
	//---------------------------------------------------------------------------------
	//inicialización de vectores 'X'.
	this->IN_PRO_RG = new dou *[_x_length];

	//---------------------------------------------------------------------------------
	//seteo de las dimensiones del registro.
	this->X_LENGTH	= _x_length;
	this->Y_LENGTH	= _y_length;

	//---------------------------------------------------------------------------------
	//inicialización de vectores 'X'.
	for (register in i1 = 0; i1 < _x_length; i1++)
	{
		//-----------------------------------------------------------------------------
		//inicialización de vectores 'Y'.
		this->IN_PRO_RG[i1]	=	new dou[_y_length];

		//-----------------------------------------------------------------------------
		//paralelización del bucle for.
		#pragma omp parallel for

		//-----------------------------------------------------------------------------
		//bucle para llenado de la matriz.
		for (register in i2 = 0; i2 < _y_length; i2++)
		{
			//-------------------------------------------------------------------------
			//llenado de la matriz.
			this->IN_PRO_RG[i1][i2]		= -1;
		}
	}
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método para crear estructura.
vo INPRRLIS_MD::Create(dou **_in_pro_rg1, in _str1_id, in _str2_id, in _upci_id_str1, in _upci_id_str2)
{
	//---------------------------------------------------------------------------------
	//paralelización del bucle for.
	#pragma omp parallel for

	//---------------------------------------------------------------------------------
	//seteo del registro de proporción en 'X'.
	for (in i1 = 0; i1 < this->X_LENGTH; i1++)
	{
		//-----------------------------------------------------------------------------
		//paralelización del bucle for.
		#pragma omp parallel for

		//-----------------------------------------------------------------------------
		//seteo del registro de proporción en 'Y'.
		for (in i2 = 0; i2 < this->Y_LENGTH; i2++)
		{
			//-------------------------------------------------------------------------
			//seteo del registro de proporción.
			this->IN_PRO_RG[i1][i2] = _in_pro_rg1[i1][i2];
		}
	}

	//---------------------------------------------------------------------------------
	//inicialización de registros.
	this->STR1_ID_RG		= _str1_id;														//id estructura n°1.
	this->STR2_ID_RG		= _str2_id;														//id estructura n°2.
	this->UPCI_ID_STR1_RG	= _upci_id_str1;												//id upci de estructura n°1.
	this->UPCI_ID_STR2_RG	= _upci_id_str2;												//id upci de estructura n°2.

	//---------------------------------------------------------------------------------
	//inicialización de sub-registros.
	this->CS_SRG			= OFF;															//estado de congruencia.
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método para diferenciar estructura.
dou INPRRLIS_MD::Differentiate(dou **_in_pro_rg)
{
	//---------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------
	//nivel de congruencia de las estructuras.
	dou congruence = 0;

	//---------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------
	//bucle para diferenciar estructura en 'X'.
	for (in i1 = 0; i1 < this->X_LENGTH; i1++)
	{
		//-----------------------------------------------------------------------------
		//-----------------------------------------------------------------------------
		//bucle para diferenciar estructura en 'Y'.
		for (in i2 = 0; i2 < this->Y_LENGTH; i2++)
		{
			//-------------------------------------------------------------------------
			//si "_in_pro_rg" es mayor, entonces.
			if (abs(_in_pro_rg[i1][i2]) > abs(this->IN_PRO_RG[i1][i2]))
			{
				//---------------------------------------------------------------------
				//diferenciación de estructuras para obtener congruencia porcentual acumulada.
				congruence += 100.0 - ((abs(_in_pro_rg[i1][i2] - this->IN_PRO_RG[i1][i2]) / abs(_in_pro_rg[i1][i2])) * 100.0);
			}

			//-------------------------------------------------------------------------
			//si "_in_pro_rg" es menor o igual, entonces.
			else
			{
				//---------------------------------------------------------------------
				//diferenciación de estructuras para obtener congruencia porcentual acumulada.
				congruence += 100.0 - ((abs(_in_pro_rg[i1][i2] - this->IN_PRO_RG[i1][i2]) / abs(this->IN_PRO_RG[i1][i2])) * 100.0);
			}
		}
	}

	//---------------------------------------------------------------------------------
	//cálculo del nivel de congruencia.
	congruence = (congruence) / (this->X_LENGTH * this->Y_LENGTH);

	//---------------------------------------------------------------------------------
	//retorno del nivel de congruencia.
	return congruence;
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#2: método para setear la estructura.
vo INPRRLIS_MD::Set(dou **_in_pro_rg, in _x_length, in _y_length, in _str1_id, in _str2_id, in _upci_id_str1, in _upci_id_str2, in _cs_srg)
{
	//---------------------------------------------------------------------------------
	//paralelización del bucle for.
	#pragma omp parallel for

	//---------------------------------------------------------------------------------
	//seteo del registro de diferencia en 'X'.
	for (in i1 = 0; i1 < this->X_LENGTH; i1++)
	{
		//-----------------------------------------------------------------------------
		//paralelización del bucle for.
		#pragma omp parallel for

		//-----------------------------------------------------------------------------
		//seteo del registro de diferencia en 'Y'.
		for (in i2 = 0; i2 < this->Y_LENGTH; i2++)
		{
			//-------------------------------------------------------------------------
			//seteo del registro de diferencia.
			this->IN_PRO_RG[i1][i2] = _in_pro_rg[i1][i2];
		}
	}

	//---------------------------------------------------------------------------------
	//seteo de registros.
	this->STR1_ID_RG		= _str1_id;														//id estructura n°1.
	this->STR2_ID_RG		= _str2_id;														//id estructura n°2.
	this->UPCI_ID_STR1_RG	= _upci_id_str1;												//id upci de estructura n°1.
	this->UPCI_ID_STR2_RG	= _upci_id_str2;												//id upci de estructura n°2.

	//---------------------------------------------------------------------------------
    //seteo de las dimensiones del registro de entrada.
    this->X_LENGTH			= _x_length;                                                    //largo en "x".
	this->Y_LENGTH			= _y_length;                                                    //largo en "y".

	//---------------------------------------------------------------------------------
	//seteo de sub-registros.
	this->CS_SRG			= _cs_srg;														//estado de congruencia.
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método para Clean la estructura.
vo INPRRLIS_MD::Clean()
{
	//---------------------------------------------------------------------------------
	//paralelización del bucle for.
	#pragma omp parallel for

	//---------------------------------------------------------------------------------
	//reset del registro de diferencia en 'X'.
	for (in i1 = 0; i1 < this->X_LENGTH; i1++)
	{
		//-----------------------------------------------------------------------------
		//paralelización del bucle for.
		#pragma omp parallel for

		//-----------------------------------------------------------------------------
		//reset del registro de diferencia en 'Y'.
		for (in i2 = 0; i2 < this->Y_LENGTH; i2++)
		{
			//-------------------------------------------------------------------------
			//reset del registro de diferencia.
			this->IN_PRO_RG[i1][i2] = -1;
		}
	}

	//---------------------------------------------------------------------------------
	//reset de registros.
	this->STR1_ID_RG		= -1;															//id estructura n°1.
	this->STR2_ID_RG		= -1;															//id estructura n°2.
	this->UPCI_ID_STR1_RG	= -1;															//id upci de estructura n°1.
	this->UPCI_ID_STR2_RG	= -1;															//id upci de estructura n°2.

	//---------------------------------------------------------------------------------
    //reset de las dimensiones del registro de entrada.
    this->X_LENGTH			= -1;                                                           //largo en "x".
    this->Y_LENGTH			= -1;                                                           //largo en "y".

	//---------------------------------------------------------------------------------
	//reset de sub-registros.
	this->CS_SRG			= -1;															//estado de congruencia.
}
