//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
/*
Nombre Clase : 	  SYSTEMS (Clase que almancena y utliza los diferentes sistemas a probar).
Fecha	     :	  14:13 pm 24-03-2016.
Diseñador    :	  Gustavo Catalán Ulloa.
*/
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//librerias.
#include "SYSTEMS.h"

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//espacio de nombres.
using namespace UPC;

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método constructor.
SYSTEMS::SYSTEMS()
{
	//---------------------------------------------------------------------------------
	//bucle de inicialización del buffer de salida.
	for (in i1 = 0; i1 < BUFF_OUTPUT_SIZE; i1++)
	{
		//-----------------------------------------------------------------------------
		//actualización.
		this->BUFF_OUTPUT[i1] = 0;
	}	
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#2: método destructor.
SYSTEMS::~SYSTEMS()
{
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método de entrada y salida de los SYSTEMS.
vo	SYSTEMS::input(in &_sistema, dou *_input, dou *_salida)
{
	//---------------------------------------------------------------------------------
	//selección del sistema.
	if		(_sistema == 0)	this->sistema0(_input, _salida);
	else if (_sistema == 1)	this->sistema1(_input, _salida);
	else if (_sistema == 2)	this->sistema2(_input, _salida);
	else if (_sistema == 3)	this->sistema3(_input, _salida);
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método de reSeteo.
vo SYSTEMS::reSetSystem(in &_sistema, dou &_condicionInicial)
{
	//---------------------------------------------------------------------------------
	//reSeteo de sistema seleccionado.
	if		(_sistema == 0)	this->reSetSistema0(_condicionInicial);
	else if (_sistema == 1)	this->reSetSistema1(_condicionInicial);
	else if (_sistema == 2)	this->reSetSistema2(_condicionInicial);
	else if (_sistema == 3)	this->reSetSistema3(_condicionInicial);
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: sistema0.
vo SYSTEMS::sistema0(dou *_input, dou *_salida)
{
	//---------------------------------------------------------------------------------
	//procesamiento del sistema.
	_salida[0] = -2.0 * _input[0] + 30.0;
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#2: sistema1.
vo SYSTEMS::sistema1(dou *_input, dou *_salida)
{
	//---------------------------------------------------------------------------------
	//procesamiento del sistema.
	_salida[0] = -1.45 * _input[0] + 20.0;
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#3: sistema2.
vo SYSTEMS::sistema2(dou *_input, dou *_salida)
{
	//---------------------------------------------------------------------------------
	//procesamiento del sistema.
	_salida[0] = -2.2 * _input[0] + 29.0;
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#4: sistema3.
vo SYSTEMS::sistema3(dou *_input, dou *_salida)
{
	//---------------------------------------------------------------------------------
	//actualización del buffer de salida.
	this->updateBUFF_OUTPUT();

	//---------------------------------------------------------------------------------
	//procesamiento del sistema: dx = -2x + 5 + u.
	_salida[0] = (-2 * this->BUFF_OUTPUT[1] + 5 + _input[0])*0.1 + this->BUFF_OUTPUT[1];

	//---------------------------------------------------------------------------------
	//respaldo en buffer de salida.
	this->BUFF_OUTPUT[0] = _salida[0];
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#1: método de reSeteo del sistema0.
vo SYSTEMS::reSetSistema0(dou &_condicionInicial)
{
	//---------------------------------------------------------------------------------
	//seteo de la condición inicial. 
	
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#2: método de reSeteo del sistema1.
vo SYSTEMS::reSetSistema1(dou &_condicionInicial)
{
	//---------------------------------------------------------------------------------
	//seteo de la condición inicial.
	
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#3: método de reSeteo del sistema2.
vo SYSTEMS::reSetSistema2(dou &_condicionInicial)
{
	//---------------------------------------------------------------------------------
	//seteo de la condición inicial.
	
}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//#3: método de reSeteo del sistema3.
vo SYSTEMS::reSetSistema3(dou &_condicionInicial)
{
	//---------------------------------------------------------------------------------
	//seteo de la condición inicial.

}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//método de actualización del buffer de salida.
vo SYSTEMS::updateBUFF_OUTPUT()
{
	//---------------------------------------------------------------------------------
	//bucle de actualización del buffer de salida.
	for (in i1 = 1; i1 < BUFF_OUTPUT_SIZE; i1++)
	{
		//-----------------------------------------------------------------------------
		//actualización.
		this->BUFF_OUTPUT[BUFF_OUTPUT_SIZE - i1] = this->BUFF_OUTPUT[BUFF_OUTPUT_SIZE - i1 - 1];
	}
}